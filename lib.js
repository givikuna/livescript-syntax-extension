// Generated by LiveScript 1.6.0
(function(){
  var ref$, tail, fold, foldr, flip, foldl, filter, map, execSync, mathjs, mapcar, str, int, random, lower, upper, inc, dec, supertrim, freq, len, enumerate, member, stringAppend, map2, listRef, hashRef, buildList, title, uniq, memoize, sorted, noop, id, before, after, throttle, debounce, lazy, listTo, listTil, bool, pipe, cond, expt, replaceAll, removeAll, iter, say, indexOf, isNumeric, csc, sec, cot, arcsin, arccos, arctan, arccsc, arcsec, expm1, replace, trimStart, trimEnd, input, charcode, makeHash, fold0, foldl0, foldr0, transpose, chunk, sleep, makeLegalJSName, lambda, fn, exec, toDeg, toRad, E, G, g, factorial, palindrome, divisors, perfect, naturalNumber, isInt, changeIn, foldstr, foldt, foldf, summation, comb, invertMatrix, addMatrix, minusMatrix, multiplyMatrix, divideMatrix, toString$ = {}.toString, slice$ = [].slice, arrayFrom$ = Array.from || function(x){return slice$.call(x);};
  ref$ = require('prelude-ls'), tail = ref$.tail, fold = ref$.fold, foldr = ref$.foldr, flip = ref$.flip, foldl = ref$.foldl, filter = ref$.filter, map = ref$.map;
  execSync = require('child_process').execSync;
  mathjs = require('mathjs');
  mapcar = curry$(function(f, xs){
    var i$, len$, x, results$ = [];
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      results$.push(f(x));
    }
    return results$;
  });
  str = function(s){
    if (toString$.call(s).slice(8, -1) === 'Array' || Array.isArray(s) || s instanceof Array) {
      return JSON.stringify(s);
    } else if (typeof s === 'boolean') {
      return function(b){
        if (b) {
          return true;
        } else {
          return false;
        }
      }(
      s);
    } else if (typeof s === 'null') {
      return 'null';
    } else if (typeof s === 'undefined') {
      return 'undefined';
    } else {
      return String(s);
    }
  };
  int = function(n){
    if (typeof n === 'number') {
      return Math.floor(n);
    } else {
      return Math.floor(Number(n));
    }
  };
  random = curry$(function(minVal, maxVal){
    if (minVal >= maxVal) {
      return minVal;
    }
    return (function(it){
      return it + minVal;
    })(
    Math.floor(
    (function(it){
      return it * Math.random();
    })(
    (function(it){
      return it - minVal;
    })(
    maxVal))));
  });
  lower = function(it){
    return it.toLowerCase();
  };
  upper = function(it){
    return it.toUpperCase();
  };
  inc = (function(it){
    return it + 1;
  });
  dec = (function(it){
    return it - 1;
  });
  supertrim = compose$(function(it){
    return it.replace(/\r?\n|\r/g, '');
  }, function(it){
    return it.trim();
  });
  freq = curry$(function(k, xs){
    return xs.filter((function(it){
      return it === k;
    })).length;
  });
  len = function(it){
    return it.length;
  };
  enumerate = function(it){
    return it.entries();
  };
  member = curry$(function(k, xs){
    return xs.includes(k);
  });
  stringAppend = curry$(function(s1, s2){
    return s1 + s2;
  });
  map2 = curry$(function(f, xs, ys){
    return xs.map(function(x, i){
      return f(x, ys[i]);
    });
  });
  listRef = curry$(function(i, xs){
    if (curry$(function(x$, y$){
      return x$ > y$;
    })(0, n)) {
      return xs[xs.length + n];
    } else {
      return xs[n];
    }
  });
  hashRef = curry$(function(k, xs){
    return xs[k];
  });
  buildList = curry$(function(n, f){
    return (function(){
      var i$, to$, results$ = [];
      for (i$ = 0, to$ = n; i$ < to$; ++i$) {
        results$.push(i$);
      }
      return results$;
    }()).map(f);
  });
  title = function(s){
    return (function(it){
      return it + s.slice(1);
    })(
    function(it){
      return it.toUpperCase();
    }(
    function(it){
      return it.charAt(0);
    }(
    xs)));
  };
  uniq = function(xs){
    return arrayFrom$(new Set(xs));
  };
  memoize = function(f){
    var cache;
    cache = {};
    return function(){
      var args, res$, i$, to$, res;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      args = res$;
      if (in$(args[0], cache)) {
        return cache[args[0]];
      }
      res = f(args[0]);
      cache[n] = res;
      return res;
    };
  };
  sorted = function(xs){
    var mid, l, r;
    if (xs.length <= 1) {
      return xs;
    }
    mid = Math.floor(
    (function(it){
      return it / 2;
    })(
    arr.length));
    l = sorted(arr.slice(0, mid));
    r = sorted(arr.slice(mid));
    return function(l2, r2){
      var a;
      a = [];
      while (l2.length && r2.length) {
        if (l2[0] < r2[0]) {
          a.push(l.shift());
        } else {
          a.push(r.shift());
        }
      }
      return arrayFrom$(a).concat(arrayFrom$(l), arrayFrom$(r));
    }(l, r);
  };
  noop = function(){
    null;
  };
  id = function(it){
    return it;
  };
  before = curry$(function(beforeFunc, func){
    return function(){
      var args, res$, i$, to$;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      args = res$;
      beforeFunc();
      return func.apply(null, args);
    };
  });
  after = curry$(function(func, afterFunc){
    return function(){
      var args, res$, i$, to$, result;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      args = res$;
      result = func.apply(null, args);
      afterFunc();
      return result;
    };
  });
  throttle = function(func, delay){
    var lastTime;
    lastTime = 0;
    return function(){
      var args, res$, i$, to$, currentTime, lastTime;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      args = res$;
      currentTime = Date.now();
      if (currentTime - lastTime >= delay) {
        func.apply(this, args);
        lastTime = currentTime;
      }
    };
  };
  debounce = function(func, delay){
    var timeoutId;
    timeoutId = null;
    return function(){
      var args, res$, i$, to$, timeoutId;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      args = res$;
      clearTimeout(timeoutId);
      timeoutId = setTimeout(function(){
        return func.apply(null, args);
      }, delay);
    };
  };
  lazy = function(f){
    var evaluated, result;
    evaluated = false;
    result = null;
    return function(){
      var args, res$, i$, to$, result, evaluated;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      args = res$;
      if (!evaluated) {
        result = func.apply(null, args);
        evaluated = true;
      }
      return result;
    };
  };
  listTo = curry$(function(x, y){
    var i$, results$ = [];
    for (i$ = x; i$ <= y; ++i$) {
      results$.push(i$);
    }
    return results$;
  });
  listTil = curry$(function(x, y){
    var i$, results$ = [];
    for (i$ = x; i$ < y; ++i$) {
      results$.push(i$);
    }
    return results$;
  });
  bool = Boolean;
  pipe = function(x){
    var fs, res$, i$, to$, y, len$, f;
    res$ = [];
    for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    fs = res$;
    y = x;
    for (i$ = 0, len$ = fs.length; i$ < len$; ++i$) {
      f = fs[i$];
      y = f(y);
    }
    return y;
  };
  cond = function(){
    var conditions, res$, i$, to$, len$, condition;
    res$ = [];
    for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    conditions = res$;
    for (i$ = 0, len$ = conditions.length; i$ < len$; ++i$) {
      condition = conditions[i$];
      if (condition[0] === true) {
        if (condition[1] instanceof Function) {
          return condition[1]();
        } else {
          return condition[1];
        }
      }
    }
    if (conditions[conditions.length - 1] === 'else') {
      return conditions[conditions.length - 1][1];
    }
    return null;
  };
  expt = flip(Math.pow);
  replaceAll = curry$(function(x1, x2, xs){
    return xs.replaceAll(x1, x2);
  });
  removeAll = curry$(function(x, xs){
    return xs.replaceAll(x, '');
  });
  iter = function(it){
    return it.values();
  };
  say = console.log;
  indexOf = curry$(function(x, xs){
    return xs.indexOf(x);
  });
  isNumeric = /^[-+]?\d+(\.\d+)?$/.test;
  csc = compose$((function(it){
    return 1 / it;
  }), Math.sin);
  sec = compose$((function(it){
    return 1 / it;
  }), Math.cos);
  cot = compose$((function(it){
    return 1 / it;
  }), Math.tan);
  arcsin = Math.asin;
  arccos = Math.acos;
  arctan = Math.atan;
  arccsc = compose$((function(it){
    return 1 / it;
  }), Math.asin);
  arcsec = compose$((function(it){
    return 1 / it;
  }), Math.acos);
  arctan = compose$((function(it){
    return 1 / it;
  }), Math.atan);
  expm1 = Math.expm1;
  replace = curry$(function(x1, x2, xs){
    return xs.replace(x1, x2);
  });
  trimStart = function(it){
    return it.trimStart();
  };
  trimEnd = function(it){
    return it.trimEnd();
  };
  input = require('readline-sync').question;
  charcode = function(it){
    return it.charCodeAt(0);
  };
  makeHash = function(xs){
    var obj;
    obj = {};
    xs.forEach(function(x){
      return obj[x[0]] = x[1];
    });
    return obj;
  };
  fold0 = curry$(function(f, xs){
    return fold(f, 0, xs);
  });
  foldl0 = fold0;
  foldr0 = curry$(function(f, xs){
    return foldr(f, 0, xs);
  });
  transpose = function(arr){
    var rowCount, colCount, transposedArr, col, row;
    if (!arr || arr.length === 0 || arr[0].length === 0) {
      return [];
    }
    rowCount = arr.length;
    colCount = arr[0].length;
    transposedArr = [];
    col = 0;
    while (col < colCount) {
      transposedArr[col] = [];
      row = 0;
      while (row < rowCount) {
        transposedArr[col][row] = arr[row][col];
        row += 1;
      }
      col += 1;
    }
    return transposedArr;
  };
  chunk = curry$(function(arr, size){
    var chunkedArr, i, chunk_;
    chunkedArr = [];
    i = 0;
    while (i < arr.length) {
      chunk_ = arr.slice(i, i + size);
      chunkedArr.push(chunk);
      i += 1;
    }
    return chunkedArr;
  });
  sleep = function(amount, type){
    var multiplier, start;
    type == null && (type = 'milliseconds');
    multiplier = function(){
      if (type === 'seconds') {
        return 1000;
      }
      if (type === 'hours') {
        return 3600000;
      }
      if (type === 'days') {
        return 86400000;
      }
      return 1;
    }();
    start = new Date().getTime();
    while (new Date().getTime() - start < multiplier * amount) {
      null;
    }
  };
  makeLegalJSName = function(s){
    var name;
    name = s.replace(/\r?\n|\r/g, '').trim();
    if (/^[a-zA-Z0-9]+$/.test(name)) {
      return name;
    }
    if (name[0] === name[0].toUpperCase()) {
      return lodash.camelCase(name).replace(/\b\w/g, function(c){
        return c.toUpperCase();
      });
    }
    return lodash.camelCase(name);
  };
  function defun(name, func){
    if (global.hasOwnProperty(name)) {
      return null;
    }
    if (!func) {
      global[makeLegalJSName(name)] = null;
      return global[makeLegalJSName(name)];
    }
    global[makeLegalJSName(name)] = func;
    return func;
  }
  function define(name, val){
    if (global.hasOwnProperty(name)) {
      return global['name'];
    }
    if (!val) {
      global[makeLegalJSName(name)] = null;
      return global[makeLegalJSName(name)];
    }
    global[makeLegalJSName(name)] = val;
    return val;
  }
  function defconstant(name, val){
    if (global.hasOwnProperty(name)) {
      return global['name'];
    }
    if (!val) {
      global[makeLegalJSName(name)] = null;
      return global[makeLegalJSName(name)];
    }
    Object.defineProperty(global, makeLegalJSName(name), {
      value: val,
      writable: false,
      configurable: false
    });
    return val;
  }
  function defparameter(name, val){
    if (global.hasOwnProperty(name)) {
      return null;
    }
    return defun(name, val);
  }
  function defvar(name){
    if (!global.hasOwnProperty(name)) {
      global[name] = undefined;
    }
  }
  function defmacro(name, func){
    return defun(name, func);
  }
  lambda = function(f){
    return function(){
      var args, res$, i$, to$;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      args = res$;
      return f.apply(null, args);
    };
  };
  fn = lambda;
  exec = execSync;
  toDeg = compose$(parseFloat, (function(it){
    return it * 180.0;
  }), (function(it){
    return it / Math.pi;
  }));
  toRad = compose$(parseFloat, (function(it){
    return it * Math.pi;
  }), (function(it){
    return it / 180.0;
  }));
  E = curry$(function(n, ex){
    return n * Math.pow(10, ex);
  });
  G = E(6.67408, -11);
  g = 9.807;
  factorial = function(n){
    if (n === 0 || n === 1) {
      return 1;
    } else {
      return n * factorial(dec(n));
    }
  };
  palindrome = function(s){
    return s === rev(s);
  };
  divisors = function(n){
    return filter(function(x){
      return n % x === 0;
    }, (function(){
      var i$, to$, results$ = [];
      for (i$ = 1, to$ = n; i$ < to$; ++i$) {
        results$.push(i$);
      }
      return results$;
    }()));
  };
  perfect = function(n){
    return n === fold0(curry$(function(x$, y$){
      return x$ + y$;
    }), divisors(n));
  };
  naturalNumber = function(n){
    return n > 0 && Number.isInteger(n);
  };
  isInt = Number.isInteger;
  changeIn = curry$(function(f, o){
    if (typeof f === 'number') {
      return f - o;
    } else {
      return f[0] - f[1];
    }
  });
  foldstr = curry$(function(f, xs){
    return fold(f, '', xs);
  });
  foldt = curry$(function(f, xs){
    return fold(true, '', xs);
  });
  foldf = curry$(function(f, xs){
    return fold(false, '', xs);
  });
  summation = curry$(function(n, i, f){
    var x;
    return fold0(curry$(function(x$, y$){
      return x$ + y$;
    }), (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
        x = ref$[i$];
        results$.push(f(x));
      }
      return results$;
      function fn$(){
        var i$, to$, results$ = [];
        for (i$ = i, to$ = n; i$ <= to$; ++i$) {
          results$.push(i$);
        }
        return results$;
      }
    }()));
  });
  comb = curry$(function(n, k){
    return factorial(n) / (factorial(n - k) * factorial(k));
  });
  invertMatrix = mathjs.inv;
  addMatrix = curry$(function(xs, ys){
    return xs.map(function(a, i){
      return a.map(function(x, j){
        return x + ys[i][j];
      });
    });
  });
  minusMatrix = curry$(function(xs, ys){
    return xs.map(function(a, i){
      return a.map(function(x, j){
        return x - ys[i][j];
      });
    });
  });
  multiplyMatrix = curry$(function(A, B){
    var C, res$, i$, len$, a, lresult$, j$, ref$, len1$, b, i, ref1$, j, fn2$ = curry$(function(x$, y$){
      return x$ + y$;
    });
    if (len(A[0] !== len(B))) {
      throw new Error('length of A[0] must equal length of B');
    }
    res$ = [];
    for (i$ = 0, len$ = A.length; i$ < len$; ++i$) {
      a = A[i$];
      lresult$ = [];
      for (j$ = 0, len1$ = (ref$ = B[0]).length; j$ < len1$; ++j$) {
        b = ref$[j$];
        lresult$.push(0);
      }
      res$.push(lresult$);
    }
    C = res$;
    for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
      i = ref$[i$];
      for (j$ = 0, len1$ = (ref1$ = (fn1$())).length; j$ < len1$; ++j$) {
        j = ref1$[j$];
        C[i][j] = fold0(fn2$, A[i].map(fn3$));
      }
    }
    return C;
    function fn$(){
      var i$, to$, results$ = [];
      for (i$ = 0, to$ = len(A); i$ < to$; ++i$) {
        results$.push(i$);
      }
      return results$;
    }
    function fn1$(){
      var i$, to$, results$ = [];
      for (i$ = 0, to$ = len(B[0]); i$ < to$; ++i$) {
        results$.push(i$);
      }
      return results$;
    }
    function fn3$(a, k){
      return a * B[k][j];
    }
  });
  divideMatrix = curry$(function(A, B){
    return multiplyMatrix(A, invertMatrix(b));
  });
  module.exports = {
    addMatrix: addMatrix,
    minusMatrix: minusMatrix,
    invertMatrix: invertMatrix,
    multiplyMatrix: multiplyMatrix,
    divideMatrix: divideMatrix,
    comb: comb,
    summation: summation,
    foldstr: foldstr,
    foldt: foldt,
    foldf: foldf,
    changeIn: changeIn,
    isInt: isInt,
    naturalNumber: naturalNumber,
    E: E,
    G: G,
    g: g,
    factorial: factorial,
    palindrome: palindrome,
    divisors: divisors,
    perfect: perfect,
    mapcar: mapcar,
    str: str,
    int: int,
    random: random,
    upper: upper,
    inc: inc,
    dec: dec,
    supertrim: supertrim,
    freq: freq,
    len: len,
    enumerate: enumerate,
    member: member,
    stringAppend: stringAppend,
    map2: map2,
    listRef: listRef,
    hashRef: hashRef,
    buildList: buildList,
    title: title,
    uniq: uniq,
    memoize: memoize,
    sorted: sorted,
    noop: noop,
    id: id,
    before: before,
    after: after,
    throttle: throttle,
    debounce: debounce,
    lazy: lazy,
    listTo: listTo,
    listTil: listTil,
    bool: bool,
    cond: cond,
    pipe: pipe,
    expt: expt,
    replaceAll: replaceAll,
    removeAll: removeAll,
    iter: iter,
    say: say,
    indexOf: indexOf,
    isNumeric: isNumeric,
    csc: csc,
    sec: sec,
    cot: cot,
    arcsin: arcsin,
    arccos: arccos,
    arctan: arctan,
    expm1: expm1,
    replace: replace,
    trimStart: trimStart,
    trimEnd: trimEnd,
    input: input,
    charcode: charcode,
    makeHash: makeHash,
    fold0: fold0,
    foldr0: foldr0,
    foldl0: foldl0,
    transpose: transpose,
    chunk: chunk,
    sleep: sleep,
    lambda: lambda,
    fn: fn,
    defun: defun,
    define: define,
    defconstant: defconstant,
    defparameter: defparameter,
    defvar: defvar,
    defmacro: defmacro
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
  function compose$() {
    var functions = arguments;
    return function() {
      var i, result;
      result = functions[0].apply(this, arguments);
      for (i = 1; i < functions.length; ++i) {
        result = functions[i](result);
      }
      return result;
    };
  }
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
