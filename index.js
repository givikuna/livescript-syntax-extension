// Generated by LiveScript 1.6.0
(function(){
  var readlineSync, fs, path, lodash, execSync, ref$, filter, empty, floor, isItNaN, flatten, any, sort, reverse, unique, ONCE, nothing, NOTHING, isNoMoreThan, isNoLessThan, t, nil, uniq, lazy, throttle, debounce, noop, identity, before, after, sorted, say, slice$ = [].slice, arrayFrom$ = Array.from || function(x){return slice$.call(x);};
  readlineSync = require('readline-sync');
  fs = require('fs');
  path = require('path');
  lodash = require('lodash');
  execSync = require('child_process').execSync;
  ref$ = require('prelude-ls'), filter = ref$.filter, empty = ref$.empty, floor = ref$.floor, isItNaN = ref$.isItNaN, flatten = ref$.flatten, any = ref$.any, sort = ref$.sort, reverse = ref$.reverse, unique = ref$.unique;
  function dir(){
    return fs.readdirSync(process.cwd());
  }
  function currentDir(){
    return process.cwd();
  }
  function len(){
    return function(it){
      return it.length;
    };
  }
  function print(){
    var data, res$, i$, to$;
    res$ = [];
    for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    data = res$;
    return console.log.apply(console, data);
  }
  function isNumeric(it){
    return /^[-+]?\d+(\.\d+)?$/.test(it);
  }
  function haveMatchingValues(arr1, arr2){
    return arr1.some(function(item){
      return arr2.includes(item);
    });
  }
  function hasMatchingValuesWith(){
    var args, res$, i$, to$;
    res$ = [];
    for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    args = res$;
    return haveMatchingValues.apply(null, args);
  }
  function doesNotHaveMatchingValuesWith(arr1, arr2){
    return !hasMatchingValuesWith(arr1, arr2);
  }
  function occurs(){
    return isMoreThan(countOccurrences.apply(this, arguments), 0);
  }
  function occursIn(){
    return occurs.apply(this, arguments);
  }
  function countOccurrences(key, toSearch){
    var count, i;
    count = 0;
    if (Array.isArray(toSearch)) {
      i = 0;
      while (i < len(toSearch)) {
        if (!Array.isArray(key) && Array.isArray(toSearch[i])) {
          count += countOccurrencesOf(toSearch, key);
        }
        if (equals(toSearch[i], key)) {
          count++;
        }
      }
    }
    if (typeof toSearch === 'string' && typeof key === 'string' || typeof key === 'number' || typeof key === 'boolean') {
      key = str(key);
      count = toSearch.split(key).length - 1;
    }
    return count;
  }
  function countOccurrencesIn(){
    return countOccurrences.apply(this, arguments);
  }
  function occursMoreThan(key, toSearch, count){
    return countOccurrences(key, toSearch) > count;
  }
  function occursLessThan(key, toSearch, count){
    return countOccurrences(key, toSearch) < count;
  }
  function lower(it){
    var i$, len$, el;
    if (typeof it === 'string') {
      return it.toLowerCase();
    }
    if (typeof Array.isArray(it)) {
      for (i$ = 0, len$ = it.length; i$ < len$; ++i$) {
        el = it[i$];
        if (typeof el === 'string' || Array.isArray(el)) {
          it[it.indexOf(el)] = lower(el);
        }
      }
      return it;
    }
    return it;
  }
  function upper(it){
    var i$, len$, el;
    if (typeof it === 'string') {
      return it.toUpperCase();
    }
    if (typeof Array.isArray(it)) {
      for (i$ = 0, len$ = it.length; i$ < len$; ++i$) {
        el = it[i$];
        if (typeof el === 'string') {
          it[it.indexOf(el)] = upper(el);
        }
      }
      return it;
    }
    return it;
  }
  ONCE = 1;
  nothing = null;
  NOTHING = nothing;
  function moreThan(el1, el2){
    return el1 > el2;
  }
  function lessThan(el1, el2){
    return el1 < el2;
  }
  function isMoreThan(){
    return moreThan.apply(this, arguments);
  }
  function isLessThan(){
    return lessThan.apply(this, arguments);
  }
  function noMoreThan(a, b){
    return a < b || a === b;
  }
  function noLessThan(a, b){
    return a > b || a === b;
  }
  isNoMoreThan = noMoreThan;
  isNoLessThan = noLessThan;
  function supertrim(it){
    return it.replace(/\r?\n|\r/g, '').trim();
  }
  function stringToNumber(it){
    var style, e;
    if (typeof it !== 'string' || /^\d+[a-zA-Z]*$/.test(it === false) || countOccurrences('-', it > 0) && !it.startsWith('-')) {
      return 0;
    }
    it = supertrim(it);
    style = function(inputString){
      if (countOccurrences('.', inputString) > 1 && countOccurrences(',', inputString) < 2 && countOccurrences('_', inputString) === 0) {
        return 'european';
      }
      if (countOccurrences(',', inputString) > 1 && countOccurrences('.', inputString) < 2 && countOccurrences('_', inputString) === 0) {
        return 'american';
      }
      if (countOccurrences(',', inputString) > 0 && !occurs('.', inputString)) {
        return 'weird-pythonic';
      }
      return 'pythonic';
    }(it);
    try {
      return Number(function(givenStyle, givenString){
        var returnString;
        returnString = '';
        if (givenStyle === 'pythonic') {
          returnString = givenString.replace(/_/g, '');
        }
        if (givenStyle === 'european') {
          returnString = givenString.replace(/\./g, '').replace(/,/, '.');
        }
        if (givenStyle === 'american') {
          returnString = givenString.replace(/,/g, '');
        }
        if (givenStyle === 'weird-pythonic') {
          returnString = givenString.replace(/_/g, '').replace(/,/, '.');
        }
        return returnString.replace(/[A-Za-z]/g, '');
      }(style, it));
    } catch (e$) {
      e = e$;
      return 0;
    }
  }
  function int(it){
    var e;
    try {
      if (typeof it === 'number') {
        return Math.floor(it);
      }
      if (typeof it === 'string') {
        if (isNumeric(it)) {
          return parseInt(it, 10);
        }
        return int(stringToNumber(it));
      }
      return Number(it);
    } catch (e$) {
      e = e$;
      return 0;
    }
  }
  function isJSON(it){
    var err, e;
    try {
      if (typeof it === 'string') {
        try {
          JSON.parse(it);
          return true;
        } catch (e$) {
          err = e$;
          return false;
        }
      }
      if (typeof it === 'Object') {
        try {
          if (Array.isArray(it)) {
            return true;
          }
          if (Array.isArray(JSON.parse(JSON.stringify(it)))) {
            return true;
          }
          return true;
        } catch (e$) {
          err = e$;
          return false;
        }
      }
    } catch (e$) {
      e = e$;
      false;
    }
    return false;
  }
  function isArray(it){
    return Array.isArray(it) || isJSON(it) || it instanceof Array || it instanceof JSON;
  }
  function equals(val1, val2){
    var i$, len$, key, e;
    try {
      if (val1 === val2) {
        return true;
      }
      if (deepEquals(val1, val2)) {
        return true;
      }
      if (typeof val1 !== typeof val2) {
        return false;
      }
      if (Array.isArray(val1 !== Array.isArray(val2))) {
        return false;
      }
      if (len(Object.keys(val1 !== len(Object.keys(val2))))) {
        return false;
      }
      if (Array.isArray(val1) && Array.isArray(val2)) {
        return len(val1) === len(val2) && val1.every(function(value, index){
          return value === arr2[index];
        });
      } else {
        for (i$ = 0, len$ = val1.length; i$ < len$; ++i$) {
          key = val1[i$];
          if (!deepEquals(val1[key], val2[key])) {
            return false;
          }
        }
      }
      return true;
    } catch (e$) {
      e = e$;
      return false;
    }
  }
  function equalsAny(key, arr){
    var i$, ref$, len$, el;
    if (in$(key, arr)) {
      return true;
    }
    for (i$ = 0, len$ = (ref$ = flatten(arr)).length; i$ < len$; ++i$) {
      el = ref$[i$];
      if (equals(key, el) || key == el) {
        return true;
      }
    }
    return false;
  }
  function isNotBlank(it){
    if (equalsAny(it, [null, undefined, "", {}, []]) || empty(it)) {
      return true;
    }
    return false;
  }
  function isBlank(it){
    return !isNotBlank(it);
  }
  function bool(it){
    if (it === 'true' || it === 1) {
      return 'true';
    }
    if (it === 'false' || it === 0) {
      return 'false';
    }
    if (it) {
      return 'true';
    }
    return 'false';
  }
  function booleanToString(it){
    if (it) {
      return 'true';
    }
    return 'false';
  }
  function isBoolString(it){
    if (it === 'true' || it === 'false' || it === 'on' || it === 'off' || it === 'yes' || it === 'no') {
      return true;
    } else {
      return false;
    }
  }
  function str(it){
    var e;
    if (isJSON(it) || it instanceof Array) {
      return JSON.stringify(it);
    }
    if (typeof it === 'string') {
      return it;
    }
    if (typeof it === 'undefined') {
      return 'undefined';
    }
    if (it === null) {
      return 'null';
    }
    if (isItNaN(it)) {
      return 'NaN';
    }
    if (typeof it === 'boolean' && isBoolString(it)) {
      return booleanToString(it);
    }
    try {
      return String(it);
    } catch (e$) {
      e = e$;
      return "";
    }
  }
  function flatStr(it){
    if (Array.isArray(it)) {
      return flatten(it).map(function(el){
        return str(el);
      });
    }
    return it;
  }
  function random(minVal, maxVal){
    if (min >= max) {
      return min;
    }
    return (function(it){
      return it + minVal;
    })(
    floor(
    curry$(function(x$, y$){
      return x$ * y$;
    })(curry$(function(x$, y$){
      return x$ - y$;
    })(maxVal, minVal), Math.random())));
  }
  function input(prompt, changeTo){
    var answer;
    changeTo == null && (changeTo = 'str');
    answer = readlineSync.question(
    prompt);
    if ((changeTo === 'num' || changeTo === 'n' || changeTo === 'number' || changeTo === 'int') && isNumeric(answer)) {
      answer = int(answer);
    }
    if ((changeTo === 'bool' || changeTo === 'boolean' || changeTo === 'b') && isBoolString(answer)) {
      answer = bool(answer);
    }
    return answer;
  }
  function readFile(){
    return fs.readFileSync.apply(this, arguments);
  }
  function readDir(){
    return fs.readdirSync.apply(this, arguments);
  }
  function isFile(){
    return fs.existsSync.apply(this, arguments) && fs.statSync.apply(this, arguments).isFile();
  }
  function isDir(){
    return fs.existsSync.apply(this, arguments) && fs.statSync.apply(this, arguments).isDirectory();
  }
  function exists(){
    return fs.existsSync.apply(this, arguments);
  }
  function readDirectories(it){
    var e;
    if (!it || isBlank(it)) {
      it = currentDir();
    }
    try {
      return filter(isDir, readDir(it));
    } catch (e$) {
      e = e$;
      return [];
    }
  }
  function readDirectoriesIn(){
    return readDirectories.apply(this, arguments);
  }
  function readFiles(it){
    var e;
    if (!it || isBlank(it)) {
      it = currentDir();
    }
    try {
      return filter(isFile, readDir(it));
    } catch (e$) {
      e = e$;
      return [];
    }
  }
  function readFilesIn(){
    return readFiles.apply(this, arguments);
  }
  function countDirectories(it){
    return len(readDirectories(it));
  }
  function countFiles(it){
    return len(readFiles(it));
  }
  function countFilesIn(){
    return countFiles.apply(this, arguments);
  }
  function countDirectoriesIn(){
    return countDirectories.apply(this, arguments);
  }
  function strToTitle(it){
    return it.replace(/\b\w/g, function(c){
      return upper(c);
    });
  }
  function title(it){
    return strToTitle(it);
  }
  function roundToXDigits(n, digits){
    digits == null && (digits = 0);
    if (isNaN(n) || isNaN(digits)) {
      return n;
    }
    return (function(it){
      return it / Math.pow(10, digits);
    })(
    Math.round(
    curry$(function(x$, y$){
      return x$ * y$;
    })(number, Math.pow(10, digits))));
  }
  function toDecimal(it){
    return int(str(it, 10));
  }
  function toBinary(it){
    return str(int(str(it), 2));
  }
  function toHex(it){
    return str(int(str(it), 16));
  }
  function transpose(it){
    var rowCount, colCount, transposed, col, row;
    if (!it || len(it === 0) || len(it[0] === 0)) {
      return [];
    }
    rowCount = len(it);
    colCount = len(it[0]);
    transposed = [];
    col = 0;
    while (col < colCount) {
      tranposed[col] = [];
      row = 0;
      while (row < rowCount) {
        transposed[col][row] = it[row][col];
        row++;
      }
      col++;
    }
    return transposed;
  }
  function chunk(arr, size){
    var chunkedArr, i, aChunk, fn$ = curry$(function(x$, y$){
      return x$ + y$;
    });
    size == null && (size = 1);
    chunkedArr = [];
    i = 0;
    while (i < len(arr)) {
      aChunk = arr.slice(i, fn$(i, size));
      chunkedArr.push(aChunk);
    }
    return chunkedArr;
  }
  function makeFunctionName(name){
    name = supertrim(name);
    if (/^[a-zA-Z0-9]+$/.test(name)) {
      return name;
    }
    if (name[0] === upper(name[0])) {
      return title(lodash.camelCase(name));
    }
    return lodash.camelCase(name);
  }
  function defun(name, func){
    if (global.hasOwnProperty(name)) {
      return null;
    }
    if (!func) {
      global[makeFunctionName(name)] = null;
      return global[makeFunctionName(name)];
    }
    global[makeFunctionName(name)] = func;
    return func;
  }
  function define(name, func){
    return defun(name, func);
  }
  function defmacro(name, func){
    return defun(name, func);
  }
  function defconstant(name, val){
    Object.defineProperty(global, name, {
      value: val,
      writable: false,
      configurable: false
    });
    return val;
  }
  function defparameter(name, val){
    if (global.hasOwnProperty(name)) {
      return null;
    }
    return defun(name, val);
  }
  function defvar(name){
    if (!global.hasOwnProperty(name)) {
      return global[name] = undefined;
    }
  }
  function lambda(func){
    return function(){
      var args, res$, i$, to$;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      args = res$;
      return func.apply(null, args);
    };
  }
  function fn(func){
    return lambda(func);
  }
  function clone(it){
    var clonedArr, i, clonedObj, i$, len$, key, e;
    try {
      if (typeof it !== 'object' || it === nil) {
        return it;
      }
      if (Array.isArray(
      it)) {
        clonedArr = [];
        i = 0;
        while (i < len(it)) {
          clonedArr.push(clone(it[i]));
          i = inc(i);
        }
        return clonedArr;
      }
      if (it instanceof Date) {
        return new Date(it);
      }
      if (it instanceof RegExp) {
        return new RegExp(it.source, it.flags);
      }
      if (typeof it === 'function') {
        return it;
      }
      clonedObj = {};
      for (i$ = 0, len$ = it.length; i$ < len$; ++i$) {
        key = it[i$];
        if (it.hasOwnProperty(key)) {
          clonedObj[key] = clone(it[key]);
        }
      }
      return clonedObj;
    } catch (e$) {
      e = e$;
      console.error(e);
      return it;
    }
  }
  t = true;
  nil = null;
  function list(){
    var elements, res$, i$, to$;
    res$ = [];
    for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    elements = res$;
    return elements;
  }
  function mapcar(func, list_){
    return list.map(func);
  }
  function append(list1, list2){
    return arrayFrom$(list1).concat(arrayFrom$(list2));
  }
  uniq = unique;
  function rev(it){
    if (typeof it === 'string') {
      it.split('').reverse().join('');
    }
    if (typeof it === 'number') {
      curry$(function(x$, y$){
        return x$ * y$;
      })(parseFloat(it.toString().split(''))).reverse().join('', Math.sign(it));
    }
    if (Array.isArray(
    it)) {
      it.reverse();
    }
    return reverse(it);
  }
  function echo(){
    return print.apply(this, arguments);
  }
  function getFileExtension(fileName){
    if (typeof fileName !== 'string' || any(equals(fileName), [null, undefined])) {
      return undefined;
    }
    if (len(
    fileName.split('.')) > 1) {
      return str(file.split('.')).pop();
    }
    return str(undefined);
  }
  function execute(it){
    if (typeof it !== 'string') {
      return '';
    }
    return str(
    execSync(
    it));
  }
  function println(){
    return echo.apply(this, arguments);
  }
  function funcall(func){
    var args, res$, i$, to$;
    res$ = [];
    for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    args = res$;
    return func.apply(null, args);
  }
  function def(name, func){
    return define(name, func);
  }
  function inc(it){
    if (typeof it === 'number') {
      return curry$(function(x$, y$){
        return x$ + y$;
      })(1, it);
    }
    if (isNumeric(
    it)) {
      return curry$(function(x$, y$){
        return x$ + y$;
      })(1, stringToNumber(it));
    }
    return it;
  }
  function dec(it){
    if (typeof it === 'number') {
      return curry$(function(x$, y$){
        return x$ - y$;
      })(it, 1);
    }
    if (isNumeric(
    it)) {
      return curry$(function(x$, y$){
        return x$ - y$;
      })(1, stringToNumber(it));
    }
    return it;
  }
  function length(it){
    return len(it);
  }
  function sleep(amount, type){
    var newAmount, start, fn$ = curry$(function(x$, y$){
      return x$ - y$;
    }), fn1$ = curry$(function(x$, y$){
      return x$ - y$;
    }), fn2$ = curry$(function(x$, y$){
      return x$ - y$;
    }), fn3$ = curry$(function(x$, y$){
      return x$ - y$;
    });
    type == null && (type = 'milliseconds');
    if (type === 'seconds') {
      newAmount = curry$(function(x$, y$){
        return x$ * y$;
      })(1000, amount);
      start = new Date().getTime();
      while (fn$(new Date().getTime(), start) < newAmount) {
        NOTHING;
      }
    }
    if (type === 'hours') {
      newAmount = curry$(function(x$, y$){
        return x$ * y$;
      })(3600000, amount);
      start = new Date().getTime();
      while (fn1$(new Date().getTime(), start) < newAmount) {
        NOTHING;
      }
    }
    if (type === 'days') {
      newAmount = curry$(function(x$, y$){
        return x$ * y$;
      })(86400000, amount);
      start = new Date().getTime();
      while (fn2$(new Date().getTime(), start) < newAmount) {
        NOTHING;
      }
    }
    start = new Date().getTime();
    while (fn3$(new Date().getTime(), start) < amount) {
      NOTHING;
    }
  }
  lazy = function(func){
    var evaluated, result;
    evaluated = false;
    result = null;
    return function(){
      var args, res$, i$, to$, result, evaluated;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      args = res$;
      if (!evaluated) {
        result = func.apply(null, args);
        evaluated = true;
      }
      return result;
    };
  };
  throttle = function(func, delay){
    var lastTime;
    lastTime = 0;
    return function(){
      var args, res$, i$, to$, currentTime, lastTime;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      args = res$;
      currentTime = Date.now();
      if (curry$(function(x$, y$){
        return x$ - y$;
      })(currentTime, lastTime) >= delay) {
        func.apply(this, args);
        return lastTime = currentTime;
      }
    };
  };
  debounce = function(func, delay){
    var timeoutId;
    timeoutId = null;
    return function(){
      var args, res$, i$, to$, timeoutId;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      args = res$;
      clearTimeout(timeoutId);
      timeoutId = setTimeout(function(){
        return func.apply(null, args);
      }, delay);
    };
  };
  noop = function(){
    NOTHING;
  };
  identity = function(it){
    return it;
  };
  before = function(beforeFunc, func){
    return function(){
      var args, res$, i$, to$;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      args = res$;
      beforeFunc();
      return func.apply(null, args);
    };
  };
  after = function(func, afterFunc){
    return function(){
      var args, res$, i$, to$, result;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      args = res$;
      result = func.apply(null, args);
      afterFunc();
      return result;
    };
  };
  sorted = sort;
  say = echo;
  module.exports = {
    sorted: sorted,
    clone: clone,
    say: say,
    before: before,
    after: after,
    lazy: lazy,
    throttle: throttle,
    debounce: debounce,
    noop: noop,
    sleep: sleep,
    isBoolString: isBoolString,
    length: length,
    inc: inc,
    dec: dec,
    def: def,
    defmacro: defmacro,
    funcall: funcall,
    println: println,
    define: define,
    execute: execute,
    getFileExtension: getFileExtension,
    echo: echo,
    lambda: lambda,
    defun: defun,
    len: len,
    print: print,
    dir: dir,
    isNumeric: isNumeric,
    int: int,
    isJSON: isJSON,
    str: str,
    equals: equals,
    bool: bool,
    random: random,
    input: input,
    readFile: readFile,
    readDir: readDir,
    isFile: isFile,
    isDir: isDir,
    exists: exists,
    countDirectories: countDirectories,
    countFiles: countFiles,
    strToTitle: strToTitle,
    title: title,
    roundToXDigits: roundToXDigits,
    toDecimal: toDecimal,
    toBinary: toBinary,
    toHex: toHex,
    transpose: transpose,
    chunk: chunk,
    currentDir: currentDir,
    isNotBlank: isNotBlank,
    isBlank: isBlank,
    readDirectories: readDirectories,
    readFiles: readFiles,
    haveMatchingValues: haveMatchingValues,
    hasMatchingValuesWith: hasMatchingValuesWith,
    doesNotHaveMatchingValuesWith: doesNotHaveMatchingValuesWith,
    countOccurrences: countOccurrences,
    moreThan: moreThan,
    lessThan: lessThan,
    occursMoreThan: occursMoreThan,
    occursLessThan: occursLessThan,
    countOccurrencesIn: countOccurrencesIn,
    occurs: occurs,
    occursIn: occursIn,
    lower: lower,
    upper: upper,
    ONCE: ONCE,
    nothing: nothing,
    NOTHING: nothing,
    stringToNumber: stringToNumber,
    isMoreThan: isMoreThan,
    isLessThan: isLessThan,
    isArray: isArray,
    readDirectoriesIn: readDirectoriesIn,
    readFilesIn: readFilesIn,
    countDirectoriesIn: countDirectoriesIn,
    countFilesIn: countFilesIn,
    flatStr: flatStr,
    equalsAny: equalsAny,
    list: list,
    mapcar: mapcar,
    t: t,
    nil: nil,
    append: append,
    defconstant: defconstant,
    defparameter: defparameter,
    defvar: defvar,
    fn: fn,
    rev: rev
  };
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
